[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "streaming-json-benchmark"
version = "1.0.0"
description = "Comprehensive benchmarking suite for streaming JSON parser implementations"
readme = "README.md"
license = { text = "MIT" }
authors = [
    { name = "Streaming JSON Benchmark Team", email = "benchmark@example.com" }
]
maintainers = [
    { name = "Streaming JSON Benchmark Team", email = "benchmark@example.com" }
]
keywords = ["json", "streaming", "parser", "benchmark", "performance", "serialization"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Software Development :: Testing",
    "Topic :: System :: Benchmark",
    "Topic :: Internet :: WWW/HTTP :: Dynamic Content",
]
requires-python = ">=3.8"
dependencies = [
    "pandas>=1.5.0",
    "numpy>=1.21.0",
    "ujson>=5.0.0",
    "pymongo>=4.0.0",
    "cbor2>=5.4.0",
    "msgpack>=1.0.0",
    "protobuf>=4.0.0",
    "flatbuffers>=2.0.0",
    "pyarrow>=10.0.0",
    "reactivex>=4.0.0",
    "psutil>=5.8.0",
    "matplotlib>=3.5.0",
    "seaborn>=0.11.0",
    "tqdm>=4.60.0",
    "colorama>=0.4.4",
    "tabulate>=0.9.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-benchmark>=4.0.0",
    "black>=22.0.0",
    "flake8>=5.0.0",
    "mypy>=1.0.0",
    "isort>=5.10.0",
    "pre-commit>=2.20.0",
]
docs = [
    "sphinx>=5.0.0",
    "sphinx-rtd-theme>=1.0.0",
    "myst-parser>=0.18.0",
]
all = [
    "streaming-json-benchmark[dev,docs]"
]

[project.urls]
Homepage = "https://github.com/example/streaming-json-benchmark"
Documentation = "https://streaming-json-benchmark.readthedocs.io/"
Repository = "https://github.com/example/streaming-json-benchmark.git"
"Bug Tracker" = "https://github.com/example/streaming-json-benchmark/issues"
Changelog = "https://github.com/example/streaming-json-benchmark/blob/main/CHANGELOG.md"

[project.scripts]
streaming-benchmark = "main:main"
benchmark-report = "simulation.report_generator:main"

[tool.setuptools.packages.find]
where = ["."]
include = ["serializers*", "simulation*", "tests*"]
exclude = ["tests.*", "*.tests.*", "*.tests"]

[tool.setuptools.package-data]
"*" = ["*.txt", "*.md", "*.yml", "*.yaml", "*.json"]

[tool.black]
line-length = 88
target-version = ['py313']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''
[tool.streaming-benchmark]
parser_root = "src/serializers"
max_depth = 3

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["serializers", "simulation", "tests"]

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "ujson.*",
    "pymongo.*",
    "cbor2.*",
    "msgpack.*",
    "flatbuffers.*",
    "reactivex.*",
    "psutil.*",
    "matplotlib.*",
    "seaborn.*",
    "tqdm.*",
    "colorama.*",
    "tabulate.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
pythonpath = [
    "src",
    "src/serializers/anyio", # ← anyio implementation
    "src/serializers/raw", # ← raw implementation
    "src/serializers/solid"  # ← solid implementation
]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "benchmark: marks tests as benchmark tests",
]


[tool.coverage.run]
source = ["serializers", "simulation"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/.*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
